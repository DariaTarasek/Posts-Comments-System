// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	model "OzonTestTask/internal/model"

	mock "github.com/stretchr/testify/mock"

	subscription "OzonTestTask/internal/subscription"
)

// Subscription is an autogenerated mock type for the Subscription type
type Subscription struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Subscription) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: postID, comment
func (_m *Subscription) Publish(postID int, comment *model.Comment) error {
	ret := _m.Called(postID, comment)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *model.Comment) error); ok {
		r0 = rf(postID, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: postID
func (_m *Subscription) Subscribe(postID int) subscription.SubscriptionChan {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 subscription.SubscriptionChan
	if rf, ok := ret.Get(0).(func(int) subscription.SubscriptionChan); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(subscription.SubscriptionChan)
		}
	}

	return r0
}

// NewSubscription creates a new instance of Subscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscription(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscription {
	mock := &Subscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
