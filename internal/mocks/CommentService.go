// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	model "OzonTestTask/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CommentService is an autogenerated mock type for the CommentService type
type CommentService struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *CommentService) CreateComment(ctx context.Context, comment *model.Comment) error {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Comment) error); ok {
		r0 = rf(ctx, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentsByPost provides a mock function with given fields: ctx, postID, limit, offset
func (_m *CommentService) GetCommentsByPost(ctx context.Context, postID int, limit int, offset int) ([]model.Comment, int, error) {
	ret := _m.Called(ctx, postID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPost")
	}

	var r0 []model.Comment
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]model.Comment, int, error)); ok {
		return rf(ctx, postID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []model.Comment); ok {
		r0 = rf(ctx, postID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) int); ok {
		r1 = rf(ctx, postID, limit, offset)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int, int) error); ok {
		r2 = rf(ctx, postID, limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *CommentService) GetPostByID(ctx context.Context, id int) (*model.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplies provides a mock function with given fields: ctx, parentCommentID
func (_m *CommentService) GetReplies(ctx context.Context, parentCommentID int) ([]model.Comment, error) {
	ret := _m.Called(ctx, parentCommentID)

	if len(ret) == 0 {
		panic("no return value specified for GetReplies")
	}

	var r0 []model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.Comment, error)); ok {
		return rf(ctx, parentCommentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.Comment); ok {
		r0 = rf(ctx, parentCommentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, parentCommentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentService creates a new instance of CommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentService {
	mock := &CommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
